import React from 'react';
import { ColorProps, HeightProps, MarginProps, PositionProps, WidthProps } from 'styled-system';
export interface BaseIconProps extends React.SVGProps<SVGSVGElement>, MarginProps, PositionProps {
    component: React.FC<React.SVGProps<SVGSVGElement>>;
}
export interface IconProps extends Omit<BaseIconProps, 'width' | 'height' | 'fill'>, WidthProps, HeightProps {
    fill?: ColorProps['color'];
}
declare const Icon: import("styled-components").StyledComponent<({ component: IconComponent, width, height, m, margin, mt, marginTop, mb, marginBottom, ml, marginLeft, mr, marginRight, my, mx, top, bottom, left, right, ...props }: BaseIconProps) => React.JSX.Element, any, {
    string?: number | string | undefined;
    style?: React.CSSProperties | undefined;
    clipPath?: string | undefined;
    filter?: string | undefined;
    mask?: string | undefined;
    path?: string | undefined;
    suppressHydrationWarning?: boolean | undefined;
    className?: string | undefined;
    color?: string | undefined;
    height?: number | string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    max?: number | string | undefined;
    media?: string | undefined;
    method?: string | undefined;
    min?: number | string | undefined;
    name?: string | undefined;
    target?: string | undefined;
    type?: string | undefined;
    width: string | number;
    role?: React.AriaRole | undefined;
    tabIndex?: number | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    accentHeight?: number | string | undefined;
    accumulate?: "none" | "sum" | undefined;
    additive?: "replace" | "sum" | undefined;
    alignmentBaseline?: "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "inherit" | undefined;
    allowReorder?: "no" | "yes" | undefined;
    alphabetic?: number | string | undefined;
    amplitude?: number | string | undefined;
    arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
    ascent?: number | string | undefined;
    attributeName?: string | undefined;
    attributeType?: string | undefined;
    autoReverse?: (boolean | "true" | "false") | undefined;
    azimuth?: number | string | undefined;
    baseFrequency?: number | string | undefined;
    baselineShift?: number | string | undefined;
    baseProfile?: number | string | undefined;
    bbox?: number | string | undefined;
    begin?: number | string | undefined;
    bias?: number | string | undefined;
    by?: number | string | undefined;
    calcMode?: number | string | undefined;
    capHeight?: number | string | undefined;
    clip?: number | string | undefined;
    clipPathUnits?: number | string | undefined;
    clipRule?: number | string | undefined;
    colorInterpolation?: number | string | undefined;
    colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined;
    colorProfile?: number | string | undefined;
    colorRendering?: number | string | undefined;
    contentScriptType?: number | string | undefined;
    contentStyleType?: number | string | undefined;
    cursor?: number | string | undefined;
    cx?: number | string | undefined;
    cy?: number | string | undefined;
    d?: string | undefined;
    decelerate?: number | string | undefined;
    descent?: number | string | undefined;
    diffuseConstant?: number | string | undefined;
    direction?: number | string | undefined;
    display?: number | string | undefined;
    divisor?: number | string | undefined;
    dominantBaseline?: number | string | undefined;
    dur?: number | string | undefined;
    dx?: number | string | undefined;
    dy?: number | string | undefined;
    edgeMode?: number | string | undefined;
    elevation?: number | string | undefined;
    enableBackground?: number | string | undefined;
    end?: number | string | undefined;
    exponent?: number | string | undefined;
    externalResourcesRequired?: (boolean | "true" | "false") | undefined;
    fill: string;
    fillOpacity?: number | string | undefined;
    fillRule?: "nonzero" | "evenodd" | "inherit" | undefined;
    filterRes?: number | string | undefined;
    filterUnits?: number | string | undefined;
    floodColor?: number | string | undefined;
    floodOpacity?: number | string | undefined;
    focusable?: (boolean | "true" | "false") | "auto" | undefined;
    fontFamily?: string | undefined;
    fontSize?: number | string | undefined;
    fontSizeAdjust?: number | string | undefined;
    fontStretch?: number | string | undefined;
    fontStyle?: number | string | undefined;
    fontVariant?: number | string | undefined;
    fontWeight?: number | string | undefined;
    format?: number | string | undefined;
    fr?: number | string | undefined;
    from?: number | string | undefined;
    fx?: number | string | undefined;
    fy?: number | string | undefined;
    g1?: number | string | undefined;
    g2?: number | string | undefined;
    glyphName?: number | string | undefined;
    glyphOrientationHorizontal?: number | string | undefined;
    glyphOrientationVertical?: number | string | undefined;
    glyphRef?: number | string | undefined;
    gradientTransform?: string | undefined;
    gradientUnits?: string | undefined;
    hanging?: number | string | undefined;
    horizAdvX?: number | string | undefined;
    horizOriginX?: number | string | undefined;
    href?: string | undefined;
    ideographic?: number | string | undefined;
    imageRendering?: number | string | undefined;
    in2?: number | string | undefined;
    in?: string | undefined;
    intercept?: number | string | undefined;
    k1?: number | string | undefined;
    k2?: number | string | undefined;
    k3?: number | string | undefined;
    k4?: number | string | undefined;
    k?: number | string | undefined;
    kernelMatrix?: number | string | undefined;
    kernelUnitLength?: number | string | undefined;
    kerning?: number | string | undefined;
    keyPoints?: number | string | undefined;
    keySplines?: number | string | undefined;
    keyTimes?: number | string | undefined;
    lengthAdjust?: number | string | undefined;
    letterSpacing?: number | string | undefined;
    lightingColor?: number | string | undefined;
    limitingConeAngle?: number | string | undefined;
    local?: number | string | undefined;
    markerEnd?: string | undefined;
    markerHeight?: number | string | undefined;
    markerMid?: string | undefined;
    markerStart?: string | undefined;
    markerUnits?: number | string | undefined;
    markerWidth?: number | string | undefined;
    maskContentUnits?: number | string | undefined;
    maskUnits?: number | string | undefined;
    mathematical?: number | string | undefined;
    mode?: number | string | undefined;
    numOctaves?: number | string | undefined;
    offset?: number | string | undefined;
    opacity?: number | string | undefined;
    operator?: number | string | undefined;
    order?: number | string | undefined;
    orient?: number | string | undefined;
    orientation?: number | string | undefined;
    origin?: number | string | undefined;
    overflow?: number | string | undefined;
    overlinePosition?: number | string | undefined;
    overlineThickness?: number | string | undefined;
    paintOrder?: number | string | undefined;
    panose1?: number | string | undefined;
    pathLength?: number | string | undefined;
    patternContentUnits?: string | undefined;
    patternTransform?: number | string | undefined;
    patternUnits?: string | undefined;
    pointerEvents?: number | string | undefined;
    points?: string | undefined;
    pointsAtX?: number | string | undefined;
    pointsAtY?: number | string | undefined;
    pointsAtZ?: number | string | undefined;
    preserveAlpha?: (boolean | "true" | "false") | undefined;
    preserveAspectRatio?: string | undefined;
    primitiveUnits?: number | string | undefined;
    r?: number | string | undefined;
    radius?: number | string | undefined;
    refX?: number | string | undefined;
    refY?: number | string | undefined;
    renderingIntent?: number | string | undefined;
    repeatCount?: number | string | undefined;
    repeatDur?: number | string | undefined;
    requiredExtensions?: number | string | undefined;
    requiredFeatures?: number | string | undefined;
    restart?: number | string | undefined;
    result?: string | undefined;
    rotate?: number | string | undefined;
    rx?: number | string | undefined;
    ry?: number | string | undefined;
    scale?: number | string | undefined;
    seed?: number | string | undefined;
    shapeRendering?: number | string | undefined;
    slope?: number | string | undefined;
    spacing?: number | string | undefined;
    specularConstant?: number | string | undefined;
    specularExponent?: number | string | undefined;
    speed?: number | string | undefined;
    spreadMethod?: string | undefined;
    startOffset?: number | string | undefined;
    stdDeviation?: number | string | undefined;
    stemh?: number | string | undefined;
    stemv?: number | string | undefined;
    stitchTiles?: number | string | undefined;
    stopColor?: string | undefined;
    stopOpacity?: number | string | undefined;
    strikethroughPosition?: number | string | undefined;
    strikethroughThickness?: number | string | undefined;
    stroke?: string | undefined;
    strokeDasharray?: string | number | undefined;
    strokeDashoffset?: string | number | undefined;
    strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined;
    strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined;
    strokeMiterlimit?: number | string | undefined;
    strokeOpacity?: number | string | undefined;
    strokeWidth?: number | string | undefined;
    surfaceScale?: number | string | undefined;
    systemLanguage?: number | string | undefined;
    tableValues?: number | string | undefined;
    targetX?: number | string | undefined;
    targetY?: number | string | undefined;
    textAnchor?: string | undefined;
    textDecoration?: number | string | undefined;
    textLength?: number | string | undefined;
    textRendering?: number | string | undefined;
    to?: number | string | undefined;
    transform?: string | undefined;
    u1?: number | string | undefined;
    u2?: number | string | undefined;
    underlinePosition?: number | string | undefined;
    underlineThickness?: number | string | undefined;
    unicode?: number | string | undefined;
    unicodeBidi?: number | string | undefined;
    unicodeRange?: number | string | undefined;
    unitsPerEm?: number | string | undefined;
    vAlphabetic?: number | string | undefined;
    values?: string | undefined;
    vectorEffect?: number | string | undefined;
    version?: string | undefined;
    vertAdvY?: number | string | undefined;
    vertOriginX?: number | string | undefined;
    vertOriginY?: number | string | undefined;
    vHanging?: number | string | undefined;
    vIdeographic?: number | string | undefined;
    viewBox?: string | undefined;
    viewTarget?: number | string | undefined;
    visibility?: number | string | undefined;
    vMathematical?: number | string | undefined;
    widths?: number | string | undefined;
    wordSpacing?: number | string | undefined;
    writingMode?: number | string | undefined;
    x1?: number | string | undefined;
    x2?: number | string | undefined;
    x?: number | string | undefined;
    xChannelSelector?: string | undefined;
    xHeight?: number | string | undefined;
    xlinkActuate?: string | undefined;
    xlinkArcrole?: string | undefined;
    xlinkHref?: string | undefined;
    xlinkRole?: string | undefined;
    xlinkShow?: string | undefined;
    xlinkTitle?: string | undefined;
    xlinkType?: string | undefined;
    xmlBase?: string | undefined;
    xmlLang?: string | undefined;
    xmlns?: string | undefined;
    xmlnsXlink?: string | undefined;
    xmlSpace?: string | undefined;
    y1?: number | string | undefined;
    y2?: number | string | undefined;
    y?: number | string | undefined;
    yChannelSelector?: string | undefined;
    z?: number | string | undefined;
    zoomAndPan?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: React.ReactNode | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onCut?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onCutCapture?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onPaste?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<SVGSVGElement> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onCompositionStart?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<SVGSVGElement> | undefined;
    onFocus?: React.FocusEventHandler<SVGSVGElement> | undefined;
    onFocusCapture?: React.FocusEventHandler<SVGSVGElement> | undefined;
    onBlur?: React.FocusEventHandler<SVGSVGElement> | undefined;
    onBlurCapture?: React.FocusEventHandler<SVGSVGElement> | undefined;
    onChange?: React.FormEventHandler<SVGSVGElement> | undefined;
    onChangeCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onBeforeInput?: React.FormEventHandler<SVGSVGElement> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onInput?: React.FormEventHandler<SVGSVGElement> | undefined;
    onInputCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onReset?: React.FormEventHandler<SVGSVGElement> | undefined;
    onResetCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onSubmit?: React.FormEventHandler<SVGSVGElement> | undefined;
    onSubmitCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onInvalid?: React.FormEventHandler<SVGSVGElement> | undefined;
    onInvalidCapture?: React.FormEventHandler<SVGSVGElement> | undefined;
    onLoad?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onError?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onErrorCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onKeyDown?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onKeyPress?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onKeyUp?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<SVGSVGElement> | undefined;
    onAbort?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onAbortCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onCanPlay?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onDurationChange?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEmptied?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEncrypted?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEnded?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onEndedCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadedData?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadStart?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPause?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPauseCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPlay?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPlayCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPlaying?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onPlayingCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onProgress?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onProgressCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onRateChange?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onResize?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onResizeCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSeeked?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSeekedCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSeeking?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSeekingCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onStalled?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onStalledCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSuspend?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSuspendCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onTimeUpdate?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onVolumeChange?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onWaiting?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onWaitingCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onAuxClick?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onClick?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onClickCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onContextMenu?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onDoubleClick?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onDrag?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragEnd?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragEndCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragEnter?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragEnterCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragExit?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragExitCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragLeave?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragOver?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragOverCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragStart?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDragStartCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDrop?: React.DragEventHandler<SVGSVGElement> | undefined;
    onDropCapture?: React.DragEventHandler<SVGSVGElement> | undefined;
    onMouseDown?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseEnter?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseLeave?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseMove?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseOut?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseOver?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseUp?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<SVGSVGElement> | undefined;
    onSelect?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onSelectCapture?: React.ReactEventHandler<SVGSVGElement> | undefined;
    onTouchCancel?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchEnd?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchMove?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchStart?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<SVGSVGElement> | undefined;
    onPointerDown?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerMove?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerUp?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerCancel?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerEnter?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerLeave?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerOver?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerOut?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<SVGSVGElement> | undefined;
    onScroll?: React.UIEventHandler<SVGSVGElement> | undefined;
    onScrollCapture?: React.UIEventHandler<SVGSVGElement> | undefined;
    onWheel?: React.WheelEventHandler<SVGSVGElement> | undefined;
    onWheelCapture?: React.WheelEventHandler<SVGSVGElement> | undefined;
    onAnimationStart?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<SVGSVGElement> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<SVGSVGElement> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<SVGSVGElement> | undefined;
    key?: React.Key | null | undefined;
    bottom?: import("styled-system").ResponsiveValue<import("csstype").Property.Bottom<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    top?: import("styled-system").ResponsiveValue<import("csstype").Property.Top<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    position?: import("styled-system").ResponsiveValue<import("csstype").Property.Position, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    zIndex?: import("styled-system").ResponsiveValue<import("csstype").Property.ZIndex, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    right?: import("styled-system").ResponsiveValue<import("csstype").Property.Right<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    left?: import("styled-system").ResponsiveValue<import("csstype").Property.Left<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    component: React.FC<React.SVGProps<SVGSVGElement>>;
    ref?: ((instance: SVGSVGElement | null) => void | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React.RefObject<SVGSVGElement> | null | undefined;
    theme: any;
} & IconProps, "string" | "style" | "clipPath" | "filter" | "mask" | "path" | "theme" | "ref" | "suppressHydrationWarning" | "className" | "color" | "height" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "type" | "width" | "role" | "tabIndex" | "crossOrigin" | "accentHeight" | "accumulate" | "additive" | "alignmentBaseline" | "allowReorder" | "alphabetic" | "amplitude" | "arabicForm" | "ascent" | "attributeName" | "attributeType" | "autoReverse" | "azimuth" | "baseFrequency" | "baselineShift" | "baseProfile" | "bbox" | "begin" | "bias" | "by" | "calcMode" | "capHeight" | "clip" | "clipPathUnits" | "clipRule" | "colorInterpolation" | "colorInterpolationFilters" | "colorProfile" | "colorRendering" | "contentScriptType" | "contentStyleType" | "cursor" | "cx" | "cy" | "d" | "decelerate" | "descent" | "diffuseConstant" | "direction" | "display" | "divisor" | "dominantBaseline" | "dur" | "dx" | "dy" | "edgeMode" | "elevation" | "enableBackground" | "end" | "exponent" | "externalResourcesRequired" | "fill" | "fillOpacity" | "fillRule" | "filterRes" | "filterUnits" | "floodColor" | "floodOpacity" | "focusable" | "fontFamily" | "fontSize" | "fontSizeAdjust" | "fontStretch" | "fontStyle" | "fontVariant" | "fontWeight" | "format" | "fr" | "from" | "fx" | "fy" | "g1" | "g2" | "glyphName" | "glyphOrientationHorizontal" | "glyphOrientationVertical" | "glyphRef" | "gradientTransform" | "gradientUnits" | "hanging" | "horizAdvX" | "horizOriginX" | "href" | "ideographic" | "imageRendering" | "in2" | "in" | "intercept" | "k1" | "k2" | "k3" | "k4" | "k" | "kernelMatrix" | "kernelUnitLength" | "kerning" | "keyPoints" | "keySplines" | "keyTimes" | "lengthAdjust" | "letterSpacing" | "lightingColor" | "limitingConeAngle" | "local" | "markerEnd" | "markerHeight" | "markerMid" | "markerStart" | "markerUnits" | "markerWidth" | "maskContentUnits" | "maskUnits" | "mathematical" | "mode" | "numOctaves" | "offset" | "opacity" | "operator" | "order" | "orient" | "orientation" | "origin" | "overflow" | "overlinePosition" | "overlineThickness" | "paintOrder" | "panose1" | "pathLength" | "patternContentUnits" | "patternTransform" | "patternUnits" | "pointerEvents" | "points" | "pointsAtX" | "pointsAtY" | "pointsAtZ" | "preserveAlpha" | "preserveAspectRatio" | "primitiveUnits" | "r" | "radius" | "refX" | "refY" | "renderingIntent" | "repeatCount" | "repeatDur" | "requiredExtensions" | "requiredFeatures" | "restart" | "result" | "rotate" | "rx" | "ry" | "scale" | "seed" | "shapeRendering" | "slope" | "spacing" | "specularConstant" | "specularExponent" | "speed" | "spreadMethod" | "startOffset" | "stdDeviation" | "stemh" | "stemv" | "stitchTiles" | "stopColor" | "stopOpacity" | "strikethroughPosition" | "strikethroughThickness" | "stroke" | "strokeDasharray" | "strokeDashoffset" | "strokeLinecap" | "strokeLinejoin" | "strokeMiterlimit" | "strokeOpacity" | "strokeWidth" | "surfaceScale" | "systemLanguage" | "tableValues" | "targetX" | "targetY" | "textAnchor" | "textDecoration" | "textLength" | "textRendering" | "to" | "transform" | "u1" | "u2" | "underlinePosition" | "underlineThickness" | "unicode" | "unicodeBidi" | "unicodeRange" | "unitsPerEm" | "vAlphabetic" | "values" | "vectorEffect" | "version" | "vertAdvY" | "vertOriginX" | "vertOriginY" | "vHanging" | "vIdeographic" | "viewBox" | "viewTarget" | "visibility" | "vMathematical" | "widths" | "wordSpacing" | "writingMode" | "x1" | "x2" | "x" | "xChannelSelector" | "xHeight" | "xlinkActuate" | "xlinkArcrole" | "xlinkHref" | "xlinkRole" | "xlinkShow" | "xlinkTitle" | "xlinkType" | "xmlBase" | "xmlLang" | "xmlns" | "xmlnsXlink" | "xmlSpace" | "y1" | "y2" | "y" | "yChannelSelector" | "z" | "zoomAndPan" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-braillelabel" | "aria-brailleroledescription" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colindextext" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-description" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowindextext" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerLeave" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "bottom" | "top" | "m" | "margin" | "mt" | "marginTop" | "mr" | "marginRight" | "mb" | "marginBottom" | "ml" | "marginLeft" | "mx" | "marginX" | "my" | "marginY" | "position" | "zIndex" | "right" | "left" | "component">;
export default Icon;
